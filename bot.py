import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from config import BOT_TOKEN, SUPPORT_USERNAME
from database import add_user, update_service, init_db, is_admin, get_all_requests, add_admin, get_user_requests, update_request_status
from aiogram.types import InputMediaPhoto, InputMediaVideo
import aiosqlite
from datetime import datetime, timedelta


bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

DB_PATH = "users.db"

admin_states = {}

portfolio_items = [
    {
        "type": "photo",
        "media": "https://cdn-edge.kwork.ru/files/portfolio/t3/40/75ce69e15585395879863b8114c89f3e8f4d98f1-1685679487.jpg",
        "caption": "–°–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ A"
    },
    {
        "type": "photo",
        "media": "https://pic.rutubelist.ru/video/5d/24/5d241166a5413e7e6f6ed3c8d8be9012.jpg",
        "caption": "–ü—Ä–∏–º–µ—Ä —Å–ª–∞–π–¥—à–æ—É"
    }
]


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìà –£—Å–ª—É–≥–∏", callback_data="services")],
    [InlineKeyboardButton(text="üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã", callback_data="portfolio")],
    [InlineKeyboardButton(text="üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{SUPPORT_USERNAME.lstrip('@')}")],
    [InlineKeyboardButton(text="üåü –ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã", callback_data="view_reviews")]
])

# –ö–Ω–æ–ø–∫–∏ —É—Å–ª—É–≥
services_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üíª –°–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞", callback_data="service_–°–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞")],
    [InlineKeyboardButton(text="üíé –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –û–°", callback_data="service_–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –û–°")],
    [InlineKeyboardButton(text="üåá –°–ª–∞–π–¥—à–æ—É", callback_data="service_–°–ª–∞–π–¥—à–æ—É")],
    [InlineKeyboardButton(text="üôÜ‚Äç‚ôÄÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ç–æ", callback_data="service_–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ç–æ")],
])

async def send_main_menu(user_id: int, text: str = "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"):
    photo_url = "https://sun9-36.userapi.com/impf/c850232/v850232621/153fd8/rgSHvgyOdDk.jpg?size=1048x1048&quality=96&sign=656aef88ba383f6f471e719fd5babe79&type=album"

    await bot.send_photo(
        chat_id=user_id,
        photo=photo_url,
        caption=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìà –£—Å–ª—É–≥–∏", callback_data="services")],
            [InlineKeyboardButton(text="üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã", callback_data="portfolio")],
            [InlineKeyboardButton(text="üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{SUPPORT_USERNAME.lstrip('@')}")],
            [InlineKeyboardButton(text="üåü –ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã", callback_data="view_reviews")]
        ])
    )

@dp.callback_query(F.data == "view_reviews")
async def view_reviews(callback: CallbackQuery):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT telegram_id, review, rating FROM users WHERE review IS NOT NULL")
        reviews = await cursor.fetchall()

    if not reviews:
        await callback.message.answer("–£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
    else:
        text = "üìã <b>–û—Ç–∑—ã–≤—ã:</b>\n\n"
        for user_id, review, rating in reviews:
            text += f"üë§ <code>{user_id}</code> ‚Äî –û—Ü–µ–Ω–∫–∞: {rating}/5\n–û—Ç–∑—ã–≤: {review}\n\n"

        await callback.message.answer(text)


@dp.callback_query(F.data == "portfolio")
async def portfolio_start(callback: CallbackQuery):
    index = 0
    item = portfolio_items[index]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"portfolio_nav:{index-1}"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"portfolio_nav:{index+1}")
        ]
    ])

    if item["type"] == "photo":
        await callback.message.answer_photo(photo=item["media"], caption=item["caption"], reply_markup=keyboard)
    else:
        await callback.message.answer_video(video=item["media"], caption=item["caption"], reply_markup=keyboard)


@dp.callback_query(F.data.startswith("portfolio_nav:"))
async def portfolio_navigate(callback: CallbackQuery):
    index = int(callback.data.split(":")[1])
    total = len(portfolio_items)

    if index < 0 or index >= total:
        await callback.answer("–ù–µ—Ç –±–æ–ª—å—à–µ —Ä–∞–±–æ—Ç.")
        return

    item = portfolio_items[index]

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if index > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"portfolio_nav:{index-1}"))
    if index < total - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"portfolio_nav:{index+1}"))

    # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
    exit_button = InlineKeyboardButton(text="üîô –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="portfolio_exit")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=([nav_buttons] if nav_buttons else []) + [[exit_button]]
    )

    await callback.message.delete()

    if item["type"] == "photo":
        await callback.message.answer_photo(photo=item["media"], caption=item["caption"], reply_markup=keyboard)
    else:
        await callback.message.answer_video(video=item["media"], caption=item["caption"], reply_markup=keyboard)

@dp.callback_query(F.data == "portfolio_exit")
async def portfolio_exit(callback: CallbackQuery):
    await callback.message.delete()
    await send_main_menu(callback.from_user.id, "üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


@dp.message(CommandStart())
async def start_handler(message: Message):
    await add_user(message.from_user.id)
    await send_main_menu(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

@dp.callback_query(F.data == "services")
async def services_handler(callback: CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É:", reply_markup=services_kb)

@dp.callback_query(F.data.startswith("service_"))
async def service_selected(callback: CallbackQuery):
    service = callback.data.split("service_")[1]
    await update_service(callback.from_user.id, service)
    await callback.message.answer(
        f"–ó–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É <b>{service}</b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!\n"
        "–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤ –õ–°."
    )
    await send_main_menu(callback.from_user.id)

@dp.message(F.text == "/status")
async def status_handler(message: Message):
    requests = await get_user_requests(message.from_user.id)
    if not requests:
        return await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")

    text = "üìã <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>\n\n"
    for req_id, service, status in requests:
        text += f"üÜî <code>{req_id}</code> ‚Äî {service} ‚Äî <b>{status}</b>\n"
    await message.answer(text)


@dp.message(F.text == "/admin")
async def admin_panel(message: Message):
    if not await is_admin(message.from_user.id):
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

    requests = await get_all_requests()
    if not requests:
        return await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:</b>\n\n"
    for req_id, user_id, service, status, created_at, status_changed_at in requests:
        text += f"{created_at} üÜî <code>{req_id}</code> | üë§ <code>{user_id}</code> ‚Äî {service} ‚Äî (üïí: {status_changed_at}) <b>{status}</b>\n"

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="admin_write_user")],
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", callback_data="admin_change_status")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫", callback_data="admin_show_analytics")],
        [InlineKeyboardButton(text="üîô –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back")]
    ])
    await message.answer(text, reply_markup=markup)



async def get_weekly_stats():
    one_week_ago = datetime.now() - timedelta(weeks=1)
    one_week_ago_str = one_week_ago.isoformat(' ', timespec='seconds')

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("""
            SELECT service, COUNT(*) FROM users
            WHERE created_at >= ?
            GROUP BY service
        """, (one_week_ago_str,))
        weekly_stats = await cursor.fetchall()
        return weekly_stats



async def get_service_stats():
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –ø–æ –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–µ
        cursor = await db.execute("""
            SELECT service, COUNT(*) FROM users
            GROUP BY service
        """)
        service_stats = await cursor.fetchall()
        return service_stats



async def get_total_requests():
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT COUNT(*) FROM users")
        total = await cursor.fetchone()
    return total[0] if total else 0



@dp.callback_query(F.data == "admin_show_analytics")
async def show_analytics(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞—è–≤–∫–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é
    weekly_stats = await get_weekly_stats()
    total_requests = await get_total_requests()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:</b>\n\n"
    stats_text += f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_requests}\n\n"
    stats_text += "<b>–ó–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b>\n"

    if not weekly_stats:
        stats_text += "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é."
    else:
        for service, count in weekly_stats:
            stats_text += f"üîπ {service}: {count} –∑–∞—è–≤–æ–∫\n"

    await callback.message.answer(stats_text)


@dp.callback_query(F.data == "admin_change_status")
async def choose_user(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    requests = await get_all_requests()

    if not requests:
        return await callback.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    keyboard = []
    for req_id, user_id, service, status, created_at, status_changed_at in requests:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        if status == "–í—ã–ø–æ–ª–Ω–µ–Ω":
            continue

        keyboard.append([
            InlineKeyboardButton(
                text=f"ID: {req_id} ‚Äî {service}",
                callback_data=f"admin_change_status_user:{user_id}"  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            )
        ])

    if not keyboard:
        return await callback.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—è–≤–∫–∞–º–∏, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º inline_keyboard
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=markup)



@dp.callback_query(F.data.startswith("admin_change_status_user:"))
async def choose_status_for_user(callback: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.data.split(":")[1]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
    markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç", callback_data=f"admin_change_status:{user_id}:–ü—Ä–∏–Ω—è—Ç"),
        InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", callback_data=f"admin_change_status:{user_id}:–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"),
        InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"admin_change_status:{user_id}:–í—ã–ø–æ–ª–Ω–µ–Ω"),
    ]])

    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}:", reply_markup=markup)


@dp.callback_query(F.data.startswith("admin_change_status:"))
async def admin_set_status(callback: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        parts = callback.data.split(":")
        user_id = parts[1]
        status = parts[2]
    except IndexError:
        return await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")

    if not await is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            UPDATE users
            SET status = ?, status_changed_at = CURRENT_TIMESTAMP
            WHERE telegram_id = ?
        """, (status, user_id))
        await db.commit()

    await callback.message.answer(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status}")

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–í—ã–ø–æ–ª–Ω–µ–Ω", –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤
    if status == "–í—ã–ø–æ–ª–Ω–µ–Ω":
        await notify_user_for_review(user_id)


async def notify_user_for_review(user_id: int):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –æ—Ç–∑—ã–≤
    await bot.send_message(
        user_id,
        "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É –æ—Ç 1 –¥–æ 5 –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å", callback_data="give_review")]
        ])
    )

@dp.message(~F.text.startswith("/"))
async def handle_text_input(message: Message):
    state = admin_states.get(message.from_user.id)

    if state == "waiting_rating":
        try:
            rating = int(message.text)
            if rating < 1 or rating > 5:
                return await message.answer("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
            admin_states[message.from_user.id] = {"state": "waiting_review", "rating": rating}
            return await message.answer("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ.")
        except ValueError:
            return await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")

    elif isinstance(state, dict) and state.get("state") == "waiting_review":
        review = message.text
        rating = state["rating"]
        try:
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute("UPDATE users SET review = ?, rating = ? WHERE telegram_id = ?", (review, rating, message.from_user.id))
                await db.commit()
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await send_main_menu(message.from_user.id, "üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        admin_states.pop(message.from_user.id, None)

    elif state == "awaiting_user_id":
        try:
            target_id = int(message.text)
            link_btn = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", url=f"tg://user?id={target_id}")]
            ])
            await message.answer(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å <code>{target_id}</code>:", reply_markup=link_btn)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        finally:
            admin_states.pop(message.from_user.id, None)
            await send_main_menu(message.from_user.id, "‚úÖ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

    else:
        await message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.")



@dp.callback_query(F.data == "give_review")
async def give_review(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.delete()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5.")

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
    admin_states[user_id] = "waiting_rating"


@dp.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    await send_main_menu(callback.from_user.id, "üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


@dp.callback_query(F.data == "admin_write_user")
async def admin_write_user(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    admin_states[callback.from_user.id] = "awaiting_user_id"
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:")

@dp.message(~F.text.startswith("/"))
async def handle_admin_input(message: Message):
    state = admin_states.get(message.from_user.id)
    if state == "awaiting_user_id":
        try:
            target_id = int(message.text)
            link_btn = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", url=f"tg://user?id={target_id}")]
            ])
            await message.answer(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å <code>{target_id}</code>:", reply_markup=link_btn)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        finally:
            admin_states.pop(message.from_user.id, None)
    await send_main_menu(message.from_user.id, "‚úÖ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


@dp.message(F.text.startswith("/addadmin"))
async def cmd_add_admin(message: Message):
    if message.from_user.id != 570201599:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID
        return await message.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤.")

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç
        parts = message.text.split()
        if len(parts) != 2:  # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç
            return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addadmin <user_id>")

        _, user_id = parts
        user_id = int(user_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await add_admin(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω.")

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û—à–∏–±–∫–∞: {e}")




async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
